{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\volov\\\\Desktop\\\\lk\\\\src\\\\context\\\\UserContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\n\n// Создаем контекст\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/createContext();\n\n// Хук для использования контекста\nexport const useUser = () => {\n  _s();\n  return useContext(UserContext);\n};\n\n// Провайдер для управления состоянием пользователя\n_s(useUser, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const UserProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n\n  // Метод для входа\n  const login = userData => setUser(userData);\n\n  // Метод для выхода\n  const logout = () => setUser(null);\n\n  // Метод для обновления данных пользователя\n  const updateUser = updatedUser => setUser(updatedUser);\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      updateUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s2(UserProvider, \"Iei9RGtZU29Y1RhBe1sbfh/MntA=\");\n_c = UserProvider;\nexport const login = async (username, password) => {\n  const response = await fetch('https://registration-fastapi.onrender.com/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    body: new URLSearchParams({\n      username,\n      password\n    }),\n    credentials: 'include'\n  });\n  if (!response.ok) {\n    throw new Error('Login failed');\n  }\n  return response.json();\n};\nexport const register = async userData => {\n  const response = await fetch('https://registration-fastapi.onrender.com/registration', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userData)\n  });\n  if (!response.ok) {\n    throw new Error('Registration failed');\n  }\n  return response.json();\n};\nexport const refreshAccessToken = async () => {\n  const refresh_token = localStorage.getItem('refresh_token');\n  try {\n    const response = await fetch('https://registration-fastapi.onrender.com/validate_refresh/jwt', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        refresh_token\n      })\n    });\n    if (response.ok) {\n      const data = await response.json();\n      console.log('Access token refreshed:', data.access_token);\n    } else {\n      console.error('Failed to refresh access token:', response.status);\n    }\n  } catch (error) {\n    console.error('Error refreshing access token:', error);\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","UserContext","useUser","_s","UserProvider","children","_s2","user","setUser","login","userData","logout","updateUser","updatedUser","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","username","password","response","fetch","method","headers","body","URLSearchParams","credentials","ok","Error","json","register","JSON","stringify","refreshAccessToken","refresh_token","localStorage","getItem","data","console","log","access_token","error","status","$RefreshReg$"],"sources":["C:/Users/volov/Desktop/lk/src/context/UserContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\n\r\n// Создаем контекст\r\nconst UserContext = createContext();\r\n\r\n// Хук для использования контекста\r\nexport const useUser = () => useContext(UserContext);\r\n\r\n// Провайдер для управления состоянием пользователя\r\nexport const UserProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n\r\n  // Метод для входа\r\n  const login = (userData) => setUser(userData);\r\n  \r\n  // Метод для выхода\r\n  const logout = () => setUser(null);\r\n\r\n  // Метод для обновления данных пользователя\r\n  const updateUser = (updatedUser) => setUser(updatedUser);\r\n\r\n  return (\r\n    <UserContext.Provider value={{ user, login, logout, updateUser }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n\r\nexport const login = async (username, password) => {\r\n  const response = await fetch('https://registration-fastapi.onrender.com/login', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\r\n      body: new URLSearchParams({ username, password }),\r\n      credentials: 'include',\r\n  });\r\n\r\n  if (!response.ok) {\r\n      throw new Error('Login failed');\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\nexport const register = async (userData) => {\r\n  const response = await fetch('https://registration-fastapi.onrender.com/registration', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(userData),\r\n  });\r\n\r\n  if (!response.ok) {\r\n      throw new Error('Registration failed');\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\nexport const refreshAccessToken = async () => {\r\n  const refresh_token = localStorage.getItem('refresh_token');\r\n\r\n  try {\r\n      const response = await fetch('https://registration-fastapi.onrender.com/validate_refresh/jwt', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ refresh_token }),\r\n      });\r\n\r\n      if (response.ok) {\r\n          const data = await response.json();\r\n          console.log('Access token refreshed:', data.access_token);\r\n      } else {\r\n          console.error('Failed to refresh access token:', response.status);\r\n      }\r\n  } catch (error) {\r\n      console.error('Error refreshing access token:', error);\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}